// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search tests should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Search
    dogs={
        Array [
            "pups",
          ]
    }
    history={
        Object {
            "key": "value",
          }
    }
    location={
        Object {
            "key": "value",
          }
    }
    match={
        Object {
            "key": "value",
          }
    }
    searchCurrentDogs={[Function]}
    searchForDogs={
        Array [
            "pups",
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header-container"
>
          <h1
                    className="whos"
          >
                    Who's a good boy, or girl?
          </h1>
          <h2
                    className="search-for"
          >
                    Search for your dog here
          </h2>
          <input
                    className="search"
                    onChange={[Function]}
                    placeholder="Please search by zip code"
          />
          <button
                    className="button"
                    onClick={[Function]}
          >
                    Search!
          </button>
</div>,
        <div
          className="card-container"
>
          <div
                    className="dog-cards"
          >
                    <Connect(Component)
                              breed={undefined}
                              city={undefined}
                              name={undefined}
                              picture={undefined}
                              sex={undefined}
                              state={undefined}
                              street={undefined}
                    />
          </div>
</div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="whos"
>
              Who's a good boy, or girl?
</h1>,
            <h2
              className="search-for"
>
              Search for your dog here
</h2>,
            <input
              className="search"
              onChange={[Function]}
              placeholder="Please search by zip code"
/>,
            <button
              className="button"
              onClick={[Function]}
>
              Search!
</button>,
          ],
          "className": "header-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Who's a good boy, or girl?",
              "className": "whos",
            },
            "ref": null,
            "rendered": "Who's a good boy, or girl?",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search for your dog here",
              "className": "search-for",
            },
            "ref": null,
            "rendered": "Search for your dog here",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "search",
              "onChange": [Function],
              "placeholder": "Please search by zip code",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search!",
              "className": "button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Search!",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="dog-cards"
>
            <Connect(Component)
                        breed={undefined}
                        city={undefined}
                        name={undefined}
                        picture={undefined}
                        sex={undefined}
                        state={undefined}
                        street={undefined}
            />
</div>,
          "className": "card-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(Component)
                breed={undefined}
                city={undefined}
                name={undefined}
                picture={undefined}
                sex={undefined}
                state={undefined}
                street={undefined}
/>,
            ],
            "className": "dog-cards",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "breed": undefined,
                "city": undefined,
                "name": undefined,
                "picture": undefined,
                "sex": undefined,
                "state": undefined,
                "street": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header-container"
>
            <h1
                        className="whos"
            >
                        Who's a good boy, or girl?
            </h1>
            <h2
                        className="search-for"
            >
                        Search for your dog here
            </h2>
            <input
                        className="search"
                        onChange={[Function]}
                        placeholder="Please search by zip code"
            />
            <button
                        className="button"
                        onClick={[Function]}
            >
                        Search!
            </button>
</div>,
          <div
            className="card-container"
>
            <div
                        className="dog-cards"
            >
                        <Connect(Component)
                                    breed={undefined}
                                    city={undefined}
                                    name={undefined}
                                    picture={undefined}
                                    sex={undefined}
                                    state={undefined}
                                    street={undefined}
                        />
            </div>
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="whos"
>
                Who's a good boy, or girl?
</h1>,
              <h2
                className="search-for"
>
                Search for your dog here
</h2>,
              <input
                className="search"
                onChange={[Function]}
                placeholder="Please search by zip code"
/>,
              <button
                className="button"
                onClick={[Function]}
>
                Search!
</button>,
            ],
            "className": "header-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Who's a good boy, or girl?",
                "className": "whos",
              },
              "ref": null,
              "rendered": "Who's a good boy, or girl?",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search for your dog here",
                "className": "search-for",
              },
              "ref": null,
              "rendered": "Search for your dog here",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "search",
                "onChange": [Function],
                "placeholder": "Please search by zip code",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search!",
                "className": "button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Search!",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="dog-cards"
>
              <Connect(Component)
                            breed={undefined}
                            city={undefined}
                            name={undefined}
                            picture={undefined}
                            sex={undefined}
                            state={undefined}
                            street={undefined}
              />
</div>,
            "className": "card-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(Component)
                  breed={undefined}
                  city={undefined}
                  name={undefined}
                  picture={undefined}
                  sex={undefined}
                  state={undefined}
                  street={undefined}
/>,
              ],
              "className": "dog-cards",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "0",
                "nodeType": "class",
                "props": Object {
                  "breed": undefined,
                  "city": undefined,
                  "name": undefined,
                  "picture": undefined,
                  "sex": undefined,
                  "state": undefined,
                  "street": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
